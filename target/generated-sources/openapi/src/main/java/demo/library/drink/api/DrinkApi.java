/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package demo.library.drink.api;

import demo.library.domain.CreatedDrink;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "drink", description = "Drink client API")
public interface DrinkApi {

    /**
     * POST /drinks/{drink}
     *
     * @param drink  (required)
     * @return Successfully retrieved search results (status code 200)
     *         or Bad request (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "createDrink",
        tags = { "drink" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved search results", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreatedDrink.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "500", description = "Server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/drinks/{drink}",
        produces = { "application/json" }
    )
    
    ResponseEntity<CreatedDrink> createDrink(
        @Parameter(name = "drink", description = "", required = true, in = ParameterIn.PATH) @PathVariable("drink") String drink
    );

}
